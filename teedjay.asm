BasicUpstart2(start)			// <- This creates a basic sys line that can start your program

//----------------------------------------------------------

            * = $4000 "Main Program"

start:		lda #$00
            sta $d020
            sta $d021

            lda #$00
            jsr music_init

            sei

            // disable timer interrupts which can be generated by the two CIA chips
            lda #$7f
            sta $dc0d
            sta $dd0d

            // by reading this two registers we negate any pending CIA irqs
            lda $dc0d
            lda $dd0d

            // this is how to tell the VICII to generate a raster interrupt
            lda #$01
            sta $d01a

            // this is how to tell at which rasterline we want the irq to be triggered
            lda #210
            sta $d012

            // as there are more than 256 rasterlines, the topmost bit of $d011 serves as
            lda #$1b
            sta $d011 

            // we turn off the BASIC and KERNAL rom here
            lda #$35
            sta $01

            lda #<irq1
            sta $fffe
            lda #>irq1
            sta $ffff

            //lda #$ff
            //sta $d019

            // do some sprites https://www.c64-wiki.com/wiki/Page_208-211
            lda #0
            sta $d010

            lda #$ff
            sta $d015
            sta $d017
            sta $d01d

            // point all sprites to same block
            lda #192
            sta 2040
            sta 2041
            sta 2042
            sta 2043
            sta 2044
            sta 2045
            sta 2046
            sta 2047

            // fill sprites pattern
            lda #255
            ldx #0
fill:		sta 192*64, x
            inx
            eor #255
            cpx #64
            bne fill

            // draw sprites
            StoreAddressAtZeroPage($d000, $60)
            StoreAddressAtZeroPage($d001, $62)
            ldy #0
            lda #60
sprites:	sta ($60), y
            sta ($62), y
            clc
            adc #20
            iny
            iny
            cpy #16
            bne sprites			

            // copy som gfx
            ldx #0
loop:		txa
            sta $0400, x
            sta $d800, x
            inx
            cpx #240
            bne loop
            
            // enable maskable interrupts again
            cli

crazy:      sta $d020
            adc 1
            jmp crazy

//----------------------------------------------------------

irq1:  		pha
            txa
            pha
            tya
            pha

            // ack irq
            lda #$ff
            sta	$d019

            SetBorderColor(BLACK)
            jsr music_play
            SetBorderColor(RED)

            // sinus scroll sprites
            StoreAddressAtZeroPage($d001, $62)
            ldx $64
            inx 
            stx $64
            ldy #0
movespr:	lda sinus, x
            sta ($62), y
            txa
            clc
            adc #16
            tax
            iny
            iny
            cpy #16
            bne movespr

            // read scroll register and update
            lda $d016
            sec
            sbc #$01
            and #$07
            sta $d016
            cmp #$07
            bne continue

            // char ram $0400 and $0401 pointer toin $40 + $42 zero page
            StoreAddressAtZeroPage($0400, $40)
            StoreAddressAtZeroPage($0401, $42)

            // color ram $d800 and $d801 pointer to $50 + $52 zero page
            StoreAddressAtZeroPage($d800, $50)
            StoreAddressAtZeroPage($d801, $52)

            ldx #0
line:		ldy #0
            lda ($40), y
            pha
            lda ($50), y
            pha
char:		lda ($42), y
            sta ($40), y
            lda ($52), y
            sta ($50), y
            iny
            cpy #40
            bne char
            dey
            pla
            sta ($50), y
            pla
            sta ($40), y

            AddToZeroPageAddress($40, 40)
            AddToZeroPageAddress($42, 40)
            AddToZeroPageAddress($50, 40)
            AddToZeroPageAddress($52, 40)

            inx
            cpx #12
            bne line

continue:   pla
            tay
            pla
            tax
            pla
            rti

sinus:		.fill 256, 127.5 + 127.5*sin(toRadians(i*360/256))
            
//----------------------------------------------------------
            *=$1000 "Music"
            .label music_init =*			// <- You can define label with any value (not just at the current pc position as in 'music_init:') 
            .label music_play =*+3			// <- and that is useful here
            .import binary "ode to 64.bin"	// <- import is used for importing files (binary, source, c64 or text)
//----------------------------------------------------------

.macro SetBorderColor(color) {
    lda #color
    sta $d020
}

.macro AddToZeroPageAddress(zeropage, amount) {
    clc
    lda zeropage
    adc #amount
    sta zeropage
    lda zeropage + 1
    adc #0
    sta zeropage +1
}

.macro StoreAddressAtZeroPage(address, zeropage) {
    lda #<address
    sta zeropage
    lda #>address
    sta zeropage + 1
}